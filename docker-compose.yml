networks:
  go_network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

services:
  jaeger:
    image: jaegertracing/all-in-one:1.46
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC/OTLP 端口
      - "4317:4317" # OTLP gRPC 端口
      - "4318:4318" # HTTP/OTLP 端口
    networks:
      - go_network
    environment:
      - TZ=Asia/Shanghai
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_OTLP_HOST_PORT=0.0.0.0:14250
      - COLLECTOR_OTLP_HTTP_HOST_PORT=0.0.0.0:4318

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.84.0
    ports:
      - "43170:4317" # gRPC 端口（可选）
      - "43180:4318" # ✅ HTTP 端口（本地应用使用）
    networks:
      - go_network
    volumes:
      - ./conf/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml # ✅ 使用官方默认路径
    # command: ["--config", "/etc/otelcol-contrib/config.yaml"]  # 显式指定配置文件路径
    environment:
      - TZ=Asia/Shanghai
    depends_on:
      - jaeger

  # ----------------------
  # 数据库服务
  # ----------------------
  mysql:
    image: mysql:8.0
    container_name: go_mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      - TZ=Asia/Shanghai
      - MYSQL_ROOT_PASSWORD=root123456
      - MYSQL_DATABASE=go_admin
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=admin123456
      - MYSQL_ROOT_HOST=%
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./mysql/init_data.sql:/docker-entrypoint-initdb.d/02-init-data.sql
      - ./conf/mysql.cnf:/etc/mysql/conf.d/custom.cnf:ro
    command: [ '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci', '--default-time-zone=+8:00', '--sql-mode=STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO' ]
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot123456" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - go_network

  redis:
    image: redis:7-alpine
    container_name: go_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - redis_data:/data
      - ./conf/redis.conf:/etc/redis/redis.conf:ro
    command: [ "redis-server", "/etc/redis/redis.conf" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - go_network

  # ----------------------
  # 应用服务
  # ----------------------
  app:
    # image: go_admin-app:latest
    build: . # 基于当前目录的 Dockerfile 构建
    ports:
      - "8888:8888" # 应用服务端口映射
    volumes:
      - ./conf:/app/conf # 挂载配置目录
      - ./conf/config_docker.yaml:/app/conf/config.yaml # 使用Docker专用配置
      # - ./internal/handler:/app/internal/handler  # 挂载 handler 目录(注册路由)
      - ./logs:/app/logs # 挂载日志目录
    environment:
      - TZ=Asia/Shanghai
      - OTEL_EXPORTER_OTLP_ENDPOINT=jaeger:4317 # ✅ 指向 Collector 容器内端口
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_TRACES_EXPORTER=otlp
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/api/hello" ]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      - mysql # 依赖 MySQL 启动
      - redis # 依赖 Redis 启动
      - otel-collector # 依赖 Collector 启动
    networks:
      - go_network # 加入自定义网络
